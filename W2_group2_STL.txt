// Group 2:
// Members: + Bui Trung Hieu
//	    + Dao Xuan Phung
//          + Nguyen Thu Quyen
// Week2: STL(  Standard template library)
#include <iostream>
#include <string>
#include <vector>
#include<math.h>
#include<algorithm>
#include<map>
using namespace std;
const double pi=3.14;

class Shape
{
protected:
	int X, Y;
	string color;
	int net_width;
public:
	virtual void set_() { cout << ""; }
    virtual double areas()=0;
	void set(void)
	{
		cout << "\nLocation: \nX = ";
		cin >> X;
		cout << "Y = ";
		cin >> Y;
		cout << "Color: ";
		cin.ignore();
		getline(cin,color);
		cout << "Net Width =  ";
		cin >> net_width;
		set_();
	}

	friend ostream& operator<<(ostream& os, const string color) {
		os << color;
		return os; }
	virtual void show_() { cout << ""; }
	void show(void)
	{
		show_();
		cout << "\nLocation: X: " << X << "  Y: " << Y;
		cout << "\nColor: " << color << " - Net Width: " << net_width;
        cout<<"\nAres: "<<areas()<<" ( dvdt)";
	}
    int get_x(){ return X;}
	int get_y(){ return Y;}
};

class Circle : public Shape
{
protected:
	int radius;
public:
	void set_()
	{
		cout << "Radius = ";
		cin >> radius;
	}
	void show_()
	{
		cout << "Circle   - Radius: " << radius;
	}
    double areas(){
        return pi*radius*radius;
    }
};

class Square : public Shape
{
protected:
	int edge_length;
	void set_()
	{
		cout << "Edge Length = ";
		cin >> edge_length;
	}
	void show_()
	{
		cout << "Square   - Edge Length: " << edge_length;
	}
    double areas(){
        return edge_length*edge_length;
    }
};

class Rect : public Shape
{
protected:
	int width, length;
	void set_()
	{
		cout << "Length = "; cin >> length;
		cout << "Width = "; cin >> width;
	}
	void show_()
	{
		cout << "Rectangle   - Length: " << length << " - Width: " << width;
	}
    double areas(){
        return width*length;
    }
};

class Line : public Shape
{
protected:
	int X1, Y1;
public:
	void set_()
	{
		cout << "Last point position: \nX1 = ";
		cin >> X1;
		cout << "Y1 = ";
		cin >> Y1;
	}
	void show_()
	{
		cout << "Line - Last point: X1: " << X1 << "  Y1: " << Y1;
	}
    double areas(){
        return 0;
    }
};

class Oval : public Shape
{
protected:
	int axis_X, axis_Y;
public:
	void set_()
	{
		cout << "Axis X = "; cin >> axis_X;
		cout << "Axis Y = "; cin >> axis_Y;
	}
	void show_()
	{
		cout << "Oval - Axis X: " << axis_X << " - Axis Y: " << axis_Y;
	}
    double areas(){
        return pi*axis_X*axis_Y/4;
    }
};

class Tri : public Shape
{
protected:
	int lengthX, lengthY, lengthZ;
public:
	void set_()
	{
		cout << "Length: \nX = ";
		cin >> lengthX;
		cout << "Y = ";
		cin >> lengthY;
		cout << "Z = ";
		cin >> lengthZ;
	}
	void show_()
	{
		cout << "Triangle  - Length: " << lengthX << " - " << lengthY << " - " << lengthZ;
	}
    double areas(){
        double p=(lengthX+lengthY+lengthZ)/2;
        return sqrt(p*(p-lengthX)*(p-lengthY)*(p-lengthZ));
    }
};
bool compare1(Shape *x, Shape *y){   // Function to compare two ascending shape objects 
    return x->areas()<y->areas();
}
bool compare2(Shape *x, Shape *y){   // Function to compare two descending shape objects
	return x->areas()>y->areas();
}
bool find(Shape *x, int a, int b){      // Function to find the shape's position
	return (x->get_x()==a && x->get_y()==b);
}

typedef vector<Shape*> Shape_list;
/*class is as function
class Searching{
	public:
    void operator() (Shape_list list, int a, int b){
	int j=0;
	 for (int i=0;i<list.size();i++){
		if (find(list[i],a,b)){
			cout<<"the shape's property that you search: "<<endl;
			list[i]->show();
			j=1;
		}
	}
		if (j==0) cout<<"Don't find the shape whose position is ("<<a<<","<<b<<")";
	}
};*/
void check_position(map<vector<int>, Shape*> m,vector<int> p){
	map<vector<int>,int>::iterator it;
	if(m.find(p)!=m.end()){
		cout<<"List has this position:"<<endl;
		(m.find(p)->second)->show();
	}
	else cout<<"List doesn't have this position"<<endl;
}
int main()
{
	vector<Shape*> list;
	int i = 0, j;
	Shape* a;
	map<vector<int>,Shape*> map_p; // Map's key is a vector that is position and map's value is a Shape
	do {
		cout << "\nSelect the operation you want:\n1.Add a shape.\n2.Print all shapes.\n3.The sorted list.\n4.Search.\n5.Exit." << endl;
		cout<<"--------------------------";
		cout<<endl;
		cin >> i;
		if (i == 1)
		{
			cout << "Which type of shapes do you want to create?\n";
			cout << "1.Circle\n2.Square\n3.Rectangle\n4.Line\n5.Oval\n6.Triangle" << endl;
			cin >> j;
			switch (j) {
			case 1:
			{
				a = new Circle;
				a->set();
				list.push_back(a);
				vector<int> b{a->get_x(),a->get_y()}; // generate a vector has value is position
				map_p[b]=a;
				break;
			}
			case 2:
			{
				a = new Square;
				a->set();
				list.push_back(a);
				vector<int> b{a->get_x(),a->get_y()};
				map_p[b]=a;
				break;
			}
			case 3:
			{
				a = new Rect;
				a->set();
				list.push_back(a);
                vector<int> b{a->get_x(),a->get_y()};
				map_p[b]=a;
				break;
			}
			case 4:
			{
				a = new Line;
				a->set();
				list.push_back(a);
				vector<int> b{a->get_x(),a->get_y()};
				map_p[b]=a;
				break;
			}
			case 5:
			{
				a = new Oval;
				a->set();
				list.push_back(a);
				vector<int> b{a->get_x(),a->get_y()};
				map_p[b]=a;
				break;
			}
			case 6:
			{
				a = new Tri;
				a->set();
				list.push_back(a);
				vector<int> b{a->get_x(),a->get_y()};
				map_p[b]=a;
				break;
			}
			default:
			{
				cout << "Input is false!\n";
				break;
			}
			}
			cout << "Complete!\n\n";
		}
		if (i == 2)
		{
			if (list.empty())
			{
				cout << "List is empty!\n";
			}
			else
			{
				for (int a = 0; a < list.size(); a++)
				{
					cout << "\n" << a + 1 << ".";
					list[a]->show();
                    list[a]->areas();
					cout << endl;
				}
				cout << endl;
			}
		}
        if(i==3){
			int c;
			cout<<"Do you want to descend or ascend the shape list?"<<endl;
			cout<<"\n1. Ascending \n2. Descending";
			cout<<"\nYour choice is: ";cin>>c;
			if (c==1){
			sort(list.begin(),list.end(),compare1);
            cout<<"List affter ascending: "<<endl;
            for (int i=0;i<list.size();i++){
			cout<<"\n"<<i+1<<".";
            list[i]->show();
			cout<<endl;
			}}
            else {
            sort(list.begin(),list.end(),compare2);
            cout<<"List affter descending: "<<endl;
            for (int i=0;i<list.size();i++){
			cout<<"\n"<<i+1<<".";
            list[i]->show();
			cout<<endl;
			}
			}
     }
	    if (i==4){
			int a,b;
			cout<<" What is the shape'position that you want to search?"<<endl;
			cout<<"X: ";cin>> a;
			cout<<"Y: ";cin>> b;
			vector<int> position{a,b};
			check_position(map_p,position);
			//Searching s;
			//s(list,a,b);
		}
		if (i == 5) {
			for (int i=0;i<list.size();i++){
            	delete list[i];
            	list[i]=0;
			}
			break;}
	} while (1);
	
    system("pause");
	return 0;
}